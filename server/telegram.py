import telebot
import threading
import time
from telebot import types

from server.config import TOKEN

from server.models import *

bot = telebot.TeleBot(TOKEN)

reg_users = {}


@bot.message_handler(commands=['start'])
def start_message(message):
    keyboard = types.InlineKeyboardMarkup()
    if User.get_or_none(User.telegram == message.chat.id):
        get_user_data = types.InlineKeyboardButton(text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='get_user_data')
        keyboard.add(get_user_data)
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòä', reply_markup=keyboard)
        return
    message_start = BotText.get_or_none(tag='–ù–∞—á–∞–ª–æ').text
    yes = types.InlineKeyboardButton(text='–ö–æ–Ω–µ—á–Ω–æ üòÄ', callback_data='reg_yes')
    keyboard.add(yes)
    if not message_start:
        message_start = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è'
    bot.send_message(message.chat.id, message_start, reply_markup=keyboard)


def enter_login(message):
    reg_users[message.chat.id] = {
        'login': message.text,
    }
    message_start = BotText.get_or_none(tag='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è').text
    if not message_start:
        message_start = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:'
    bot.send_message(message.chat.id, message_start)
    bot.register_next_step_handler(message, enter_password)


def enter_password(message):
    reg_users[message.chat.id]['password'] = message.text
    message_start = BotText.get_or_none(tag='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö').text
    if not message_start:
        message_start = '–í—Å—ë –≤–µ—Ä–Ω–æ?'
    message_start += f'\n–õ–æ–≥–∏–Ω: {reg_users[message.chat.id]["login"]}\n–ü–∞—Ä–æ–ª—å: {reg_users[message.chat.id]["password"]}'
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text='‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ', callback_data='reg_check_yes')
    no = types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –ø–æ–ø—Ä–∞–≤–∏—Ç—å', callback_data='reg_check_no')
    keyboard.add(yes, no)
    bot.send_message(message.chat.id, message_start, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    chat_id = call.message.chat.id
    msg_by_callback(call.data, chat_id)
    if call.data in ('reg_check_no', 'reg_yes',):
        bot.register_next_step_handler(call.message, enter_login)
    elif call.data == 'reg_check_yes':
        login = reg_users[chat_id]['login']
        password = reg_users[chat_id]['password']
        User.create(mac='-1', telegram=chat_id, login=login, password=password)
    elif call.data == 'get_user_data':
        user = User.get_or_none(User.telegram == chat_id)
        bot.send_message(chat_id, f'ü§´ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n–õ–æ–≥–∏–Ω: {user.login}\n–ü–∞—Ä–æ–ª—å: {user.password}')
    elif call.data.count('this_i_') or call.data.count('this_no_i_'):
        mac = call.data.split('_')[-1]
        user = User.get_or_none(mac=mac)
        if not user:
            return
        conf = ConfirmLogin.get_or_none(ConfirmLogin.user == user)
        if not conf:
            bot.send_message(chat_id, f'‚ö†Ô∏è –í—Ö–æ–¥ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!')
            return
        if call.data.count('this_i_'):
            conf.status = 1
            conf.save()
            bot.send_message(chat_id, f'‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Ö–æ–¥!')
            return
        conf.status = 0
        conf.save()
        bot.send_message(chat_id, f'üö´ –ú—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –≤—Ö–æ–¥!')


def msg_by_callback(callback_data: str, chat_id: int) -> None:
    actions = {
        'reg_yes': {
            'tag': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞',
            'default': '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:',
        },
        'reg_check_yes': {
            'tag': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–µ—Ü',
            'default': '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!',
        },
        'reg_check_no': {
            'tag': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã',
            'default': '–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:',
        },
    }
    action = actions.get(callback_data)
    if not action:
        return
    message_start = BotText.get_or_none(tag=action['tag']).text
    if not message_start:
        message_start = action['default']
    bot.send_message(
        chat_id,
        message_start,
        reply_markup=types.ReplyKeyboardRemove()
    )


def check_confirm_login():
    while True:
        for login_confirm in ConfirmLogin.select().where(ConfirmLogin.status == -1):
            keyboard = types.InlineKeyboardMarkup()
            this_i = types.InlineKeyboardButton(text='‚úÖ –≠—Ç–æ —è', callback_data=f'this_i_{login_confirm.user.mac}')
            this_no_i = types.InlineKeyboardButton(text='‚ùå –≠—Ç–æ –Ω–µ —è',
                                                   callback_data=f'this_no_i_{login_confirm.user.mac}')
            keyboard.add(this_i, this_no_i)
            bot.send_message(login_confirm.user.telegram, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥', reply_markup=keyboard)
            login_confirm.status = -2
            login_confirm.save()
        time.sleep(1.5)


if __name__ == '__main__':
    thread = threading.Thread(target=check_confirm_login)
    thread.start()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.infinity_polling()
